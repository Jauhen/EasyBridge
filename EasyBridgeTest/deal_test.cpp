#include "stdafx.h"
#include <memory>
#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include "mock_app.h"
#include "../src/engine/Deck.H"
#include "../src/engine/bidding/ConventionSet.h"
#include "../src/model/deal.h"

using namespace ::testing;
using namespace std;

namespace UnitTests {

class DealTests : public Test {
protected:
  DealTests() {}
  virtual void SetUp() {
    app = make_shared<MockApp>();
    deck = make_shared<CDeck>(app);

    set = unique_ptr<CConventionSet>(new CConventionSet(app));

    EXPECT_CALL(*app, GetProgramTitle()).WillRepeatedly(Return("abc"));
    EXPECT_CALL(*app, GetProgramMajorVersion()).WillRepeatedly(Return(4));
    EXPECT_CALL(*app, GetProgramMinorVersion()).WillRepeatedly(Return(3));
    EXPECT_CALL(*app, GetProgramIncrementVersion()).WillRepeatedly(Return(2));
    EXPECT_CALL(*app, GetProgramBuildNumber()).WillRepeatedly(Return(1));
    EXPECT_CALL(*app, GetProgramBuildDate()).WillRepeatedly(Return("abc"));
    EXPECT_CALL(*app, GetProgramVersionString()).WillRepeatedly(Return("abc"));
    EXPECT_CALL(*app, IsSaveIntermediatePositions()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, GetCurrentConventionSet()).WillRepeatedly(Return(set.get()));
    EXPECT_CALL(*app, IsMainFrameExists()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, SetBiddingInProgress(false)).Times(AnyNumber());
    EXPECT_CALL(*app, SetGameInProgress(false)).Times(AnyNumber());
    EXPECT_CALL(*app, SetRubberInProgress(false)).Times(AnyNumber());
    EXPECT_CALL(*app, ClearMode(false)).Times(AnyNumber());
    EXPECT_CALL(*app, IsFullAutoPlayMode()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, IsFullAutoExpressPlayMode()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, GetDeck()).WillRepeatedly(Return(deck));
    EXPECT_CALL(*app, GetSuitSequence(_)).WillRepeatedly(Return('H'));
    EXPECT_CALL(*app, GetSuitToScreenIndex(_)).WillRepeatedly(Return(2));
    EXPECT_CALL(*app, GetHonorValue(_)).WillRepeatedly(Return(1));
    EXPECT_CALL(*app, IsCountShortSuits()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, IsPenalizeUGHonors()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, IsAcelessPenalty()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, IsFourAceBonus()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, InExpressAutoPlay()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, IsEnableAnalysisTracing()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, IsInAutoTestMode()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, IsDebugModeActive()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, IsRubberInProgress()).WillRepeatedly(Return(false));
    EXPECT_CALL(*app, SetAnalysisText(_, _)).Times(AnyNumber());
    EXPECT_CALL(*app, InitNewRound()).Times(AnyNumber());
    EXPECT_CALL(*app, InitNewDeal()).Times(AnyNumber());

    deck->InitializeCards();
  }

  virtual ~DealTests() {}

  virtual void TearDown() {
  }

  shared_ptr<MockApp> app;
  shared_ptr<CDeck> deck;
  unique_ptr<CConventionSet> set;
};

TEST_F(DealTests, InitNewHand) {

  Deal d{ app };
  d.InitNewHand();

  EXPECT_TRUE(Mock::VerifyAndClearExpectations(app.get()));
}

TEST_F(DealTests, DealNumberedHand) {
  EXPECT_CALL(*app, SetAllIndicators()).Times(AnyNumber());
  EXPECT_CALL(*app, IsEnableDealNumbering()).WillRepeatedly(Return(true));

  std::shared_ptr<Deal> d = std::make_shared<Deal>(app);
  EXPECT_CALL(*app, GetDeal()).WillRepeatedly(Return(d));
  EXPECT_CALL(*app, GetToday()).WillRepeatedly(Return("2016.07.12"));

  d->InitNewHand();
  d->DealNumberedHand(0, 0, 0, 1);

  string pbn = d->WriteFilePBN();

  const char* expectedPbn = "%% \n"
    "%% EXPORT\n"
    "%% PBN Format 1.0\n"
    "%% File generated by Easy Bridge version abc\n"
    "%% \n"
    "[EVENT \"abc Game\"]\n"
    "[SITE \"\"]\n"
    "[DATE \"2016.07.12\"]\n"
    "[BOARD \"\"]\n"
    "[WEST \"Computer\"]\n"
    "[NORTH \"Computer\"]\n"
    "[EAST \"Computer\"]\n"
    "[SOUTH \"Human Player\"]\n"
    "[DEALER \"S\"]\n"
    "[VULNERABLE \"NS\"]\n"
    "[DEAL \"W:T7632.J86.T84.32 AJ4.T9.Q763.A874 KQ5.K543.J5.QJ65 98.AQ72.AK92.KT9\"]\n"
    "[SCORING \"None\"]\n"
    "[DECLARER \"?\"]\n"
    "[CONTRACT \"?\"]\n"
    "[RESULT \"?\"]\n"
    "{\n"
    "                S: A J 4 \n"
    "                H: T 9 \n"
    "                D: Q 7 6 3 \n"
    "                C: A 8 7 4 \n"
    "S: T 7 6 3 2                    S: K Q 5 \n"
    "H: J 8 6                        H: K 5 4 3 \n"
    "D: T 8 4                        D: J 5 \n"
    "C: 3 2                          C: Q J 6 5 \n"
    "                S: 9 8 \n"
    "                H: A Q 7 2 \n"
    "                D: A K 9 2 \n"
    "                C: K T 9 \n"
    "}\n"
    "[AUCTION \"S\"]\n"
    "*\n"
    "[PLAY \"?\"]\n"
    "*\n"
    "[GENERATOR \"Easy Bridge version abc\"]\n"
    "[DESCRIPTION \"\"]\n";

  d.reset();

  EXPECT_STREQ(expectedPbn, pbn.c_str());
  EXPECT_TRUE(Mock::VerifyAndClearExpectations(app.get()));
}

} // namespace UnitTests
