//----------------------------------------------------------------------------------------
//
// This file and all other Easy Bridge source files are copyright (C) 2002 by Steven Han.
// Use of this file is governed by the GNU General Public License.
// See the files COPYING and COPYRIGHT for details.
//
//----------------------------------------------------------------------------------------

// WrfilePBN.cpp : implementation of PBN file writing
//

#include "stdafx.h"
#include "engine/playeropts.h"
#include "model/filecodePBN.h"
#include "engine/Player.h"
#include "engine/Card.h"
#include "engine/play/HandHoldings.h"
#include "engine/play/CardHoldings.h"
#include "model/deal.h"

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif


extern const char* tszTagName[];
static CFile* pFile;

static void SkipLine();
static void WriteLine(const CString& strValue);
static void WriteLine(int nLineCode, int nValue, std::shared_ptr<AppInterface> app);
static void WriteLine(int nLineCode, const CString& strValue, std::shared_ptr<AppInterface> app);
static void WriteComment(const CString& strValue);


//
//---------------------------------------------------------
//
// PBN File output routine
//
BOOL Deal::WriteFilePBN(CArchive& ar) {
  pFile = ar.GetFile();
  ASSERT(pFile != NULL);

  // write header
  WriteComment("");
  WriteComment("EXPORT");
  WriteComment("PBN Format 1.0");
  WriteComment(app_->FormString("File generated by Easy Bridge version %s", app_->GetProgramVersionString()));
  WriteComment("");

  //
  // write the data
  //

  // Event tag
  WriteLine(TAG_EVENT, app_->FormString("%s Game", app_->GetProgramTitle()), app_);

  // Site Tag
  WriteLine(TAG_SITE, "", app_);

  // Date Tag
  CTime time = CTime::GetCurrentTime();
  WriteLine(TAG_DATE, time.Format("%Y.%m.%d"), app_);

  /*
  * skip the round tag -- no longer mandatory in PBN 0.91+
  *
  // Round Tag
  WriteLine(TAG_ROUND, "");
  */

  // Board Tag
  WriteLine(TAG_BOARD, "", app_);

  // West/North/East/South Tags
  WriteLine(TAG_WEST, "Computer", app_);
  WriteLine(TAG_NORTH, "Computer", app_);
  WriteLine(TAG_EAST, "Computer", app_);
  WriteLine(TAG_SOUTH, "Human Player", app_);

  // Dealer Tag
  WriteLine(TAG_DEALER, app_->FormString("%c", app_->PositionToChar(m_nDealer)), app_);

  // Vulnerable Tag
  CString strVulnerable;
  if ((m_bVulnerable[NORTH_SOUTH]) && (m_bVulnerable[EAST_WEST]))
    strVulnerable = "Both";
  else if (m_bVulnerable[NORTH_SOUTH])
    strVulnerable = "NS";
  else if (m_bVulnerable[EAST_WEST])
    strVulnerable = "EW";
  else
    strVulnerable = "None";
  WriteLine(TAG_VULNERABLE, strVulnerable, app_);

  // deal tag
  CString strDeal = "W:";
  int nPos = WEST;
  for (int i = 0; i<4; i++) {
    CCardHoldings& cards = m_pPlayer[nPos]->GetHand().GetInitialHand();
    strDeal += cards.GetGIBFormatHoldingsString();
    nPos = app_->GetNextPlayer(nPos);
    if (i < 3)
      strDeal += ' ';
  }
  WriteLine(TAG_DEAL, strDeal, app_);

  // Scoring tag
  if (app_->IsRubberInProgress())
    WriteLine(TAG_SCORING, _T("Rubber"), app_);
  else
    WriteLine(TAG_SCORING, _T("None"), app_);

  // Declarer Tag
  if (ISPOSITION(m_nDeclarer))
    WriteLine(TAG_DECLARER, app_->FormString("%c", app_->PositionToChar(m_nDeclarer)), app_);
  else
    WriteLine(TAG_DECLARER, "?", app_);

  // Contract Tag
  if (ISBID(m_nContract))
    WriteLine(TAG_CONTRACT, app_->ContractToString(m_nContract, 0), app_);
  else
    WriteLine(TAG_CONTRACT, "?", app_);

  // Result tag
  if (m_numTricksPlayed == 13)
    WriteLine(TAG_RESULT, app_->FormString("\"%d\"", m_numTricksWon[m_nContractTeam]), app_);
  else
    WriteLine(TAG_RESULT, "?", app_);

  //
  // write out the hands in comment form
  //
  CString strHands = "{\r\n" + FormatOriginalHands() + "}";
  WriteLine(strHands);

  //
  // write out auction
  //
  CString strBids = app_->FormString("[AUCTION \"%c\"]", app_->PositionToChar(m_nDealer));
  if (m_numBidsMade > 0)
    strBids += "\r\n";
  nPos = m_nDealer;
  for (int i = 0; i<m_numBidsMade; i++) {
    strBids += app_->FormString("%s ", app_->BidToPBNString(m_nBiddingHistory[i]));
    nPos = app_->GetNextPlayer(nPos);
    if ((((i + 1) % 4) == 0) && (i < m_numBidsMade - 1))
      strBids += "\r\n";
  }
  // add marker if needed
  if (!ISBID(m_nContract))
    strBids += "\r\n*";
  // and write out
  WriteLine(strBids);


  //
  // write out plays
  //
  CString strPlays = app_->FormString("[PLAY \"%c\"]", app_->PositionToChar(m_nGameLead));
  if (m_numTricksPlayed> 0)
    strPlays += "\r\n";
  for (int i = 0; i<m_numTricksPlayed; i++) {
    int nPos = m_nGameLead;
    for (int j = 0; j<4; j++) {
      CCard* pCard = m_pGameTrick[i][nPos];
      if (pCard == NULL)
        strPlays += "-  ";
      else
        strPlays += app_->FormString("%s ", pCard->GetName());
      nPos = app_->GetNextPlayer(nPos);
    }
    if (i < m_numTricksPlayed - 1)
      strPlays += "\r\n";
  }
  // add marker if needed
  if (m_numTricksPlayed < 13)
    strPlays += "\r\n*";
  // and write out
  WriteLine(strPlays);


  // Generator Tag
  WriteLine(TAG_GENERATOR, app_->FormString("Easy Bridge version %s", app_->GetProgramVersionString()), app_);

  // Description Tag
  WriteLine(TAG_DESCRIPTION, m_strFileDescription, app_);

  // blank line
  //	SkipLine();

  //
  // write out the auction
  //

  //	
  // All done
  //
  ar.Flush();
  return TRUE;
}







//
static void SkipLine() {
  pFile->Write(CString("\r\n"), 2);
}


//
static void WriteLine(const CString& strLine) {
  pFile->Write(strLine + "\r\n", strLine.GetLength() + 2);
}


//
static void WriteLine(int nLineCode, int nValue, std::shared_ptr<AppInterface> app) {
  if ((nLineCode < 0) || (nLineCode > NUM_TAGS))
    return;
  CString strTag = tszTagName[nLineCode];
  strTag.MakeUpper();
  CString strTemp = app->FormString("[%s \"%d\"]", strTag, nValue);
  WriteLine(strTemp);
}


//
static void WriteLine(int nLineCode, const CString& strValue, std::shared_ptr<AppInterface> app) {
  if ((nLineCode < 0) || (nLineCode > NUM_TAGS))
    return;
  CString strTag = tszTagName[nLineCode];
  strTag.MakeUpper();
  CString strTemp = app->FormString("[%s \"%s\"]", strTag, strValue);
  WriteLine(strTemp);
}


//
static void WriteComment(const CString& strValue) {
  CString strTemp;
  strTemp.Format("%% %s", strValue);
  WriteLine(strTemp);
}